<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// init state variables
for (var i = 0; i &lt; num_controllers; i++) {
    stick_left_pressed[i] = false;
    stick_right_pressed[i] = false;
    stick_up_pressed[i] = false;
    stick_down_pressed[i] = false;
    
    stick_left_held[i] = false;
    stick_right_held[i] = false;
    stick_up_held[i] = false;
    stick_down_held[i] = false;
    
    stick_left_released[i] = false;
    stick_right_released[i] = false;
    stick_up_released[i] = false;
    stick_down_released[i] = false;
    }

threshold = 0.9; // change this to change the stick's sensitivity
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// reset pressed and released states
for (var i = 0; i &lt; num_controllers; i++) {
    stick_left_pressed[i] = false;
    stick_right_pressed[i] = false;
    stick_up_pressed[i] = false;
    stick_down_pressed[i] = false;
    
    stick_left_released[i] = false;
    stick_right_released[i] = false;
    stick_up_released[i] = false;
    stick_down_released[i] = false;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// check for changes in state
for (var i=0; i&lt;num_controllers; i++) {
    // left pressed
    if (!stick_left_held[i] &amp;&amp; gamepad_axis_value(i,gp_axislh) &lt;= -threshold) {
        stick_left_held[i] = true;
        stick_left_pressed[i] = true;
        stick_left_released[i] = false;
        alarm[0] = 1;
    }

    // left released
    else if (stick_left_held[i] &amp;&amp; gamepad_axis_value(i,gp_axislh) &gt; -threshold) {
        stick_left_held[i] = false;
        stick_left_pressed[i] = false;
        stick_left_released[i] = true;
        alarm[0] = 1;
    }


    // right pressed
    if (!stick_right_held[i] &amp;&amp; gamepad_axis_value(i,gp_axislh) &gt;= threshold) {
        stick_right_held[i] = true;
        stick_right_pressed[i] = true;
        stick_right_released[i] = false;
        alarm[0] = 1;
    }

    // right released
    else if (stick_right_held[i] &amp;&amp; gamepad_axis_value(i,gp_axislh) &lt; threshold) {
        stick_right_held[i] = false;
        stick_right_pressed[i] = false;
        stick_right_released[i] = true;
        alarm[0] = 1;
    }

    // up pressed
    if (!stick_up_held[i] &amp;&amp; gamepad_axis_value(i,gp_axislv) &gt;= threshold) {
        stick_up_held[i] = true;
        stick_up_pressed[i] = true;
        stick_up_released[i] = false;
        alarm[0] = 1;
    }

    // up released
    else if (stick_up_held[i] &amp;&amp; gamepad_axis_value(i,gp_axislv) &lt; threshold) {
        stick_up_held[i] = false;
        stick_up_pressed[i] = false;
        stick_up_released[i] = true;
        alarm[0] = 1;
    }


    // down pressed
    if (!stick_down_held[i] &amp;&amp; gamepad_axis_value(i,gp_axislv) &lt;= -threshold) {
        stick_down_held[i] = true;
        stick_down_pressed[i] = true;
        stick_down_released[i] = false;
        alarm[0] = 1;
    }

    // down released
    else if (stick_down_held[i] &amp;&amp; gamepad_axis_value(i,gp_axislv) &gt; -threshold) {
        stick_down_held[i] = false;
        stick_down_pressed[i] = false;
        stick_down_released[i] = true;
        alarm[0] = 1;
    }
}
if (player == 1) {
    p1LeftPressed = keyboard_check_pressed(ord'A') || gamepad_button_check_pressed(0,gp_padl) || stick_left_pressed[0];
}

if (player == 2) {
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
